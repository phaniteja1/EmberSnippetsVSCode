{
/**
*		Ember ES6 snippets
**/
	"consoleLog": {
		"prefix": "clg",
		"body": [
			"console.log(${1:object});"
		],
		"description": "console.log(object)"
	},

	"windowConsoleLog": {
		"prefix": "wclg",
		"body": [
			"window.console.log(${1:object});"
		],
		"description": "window.console.log(object)"
	},

	"consoleLogWithTwoParams": {
		"prefix": "clg2",
		"body": [
			"console.log('${1:tag}', ${2:value});"
		],
		"description": "console.log('tag', value)"
	},

	"windowConsoleLogWithTwoParams": {
		"prefix": "wclg2",
		"body": [
			"window.console.log('${1:tag}', ${2:value});"
		],
		"description": "window.console.log('tag', value)"
	},

	// Get and Set

	"getThisObject": {
		"prefix": "tgt",
		"body": [
			"this.get('${1:object}')"
		],
		"description": "this.get(object)"
	},

	"setThisObject": {
		"prefix": "tst",
		"body": [
			"this.set('${1:tag}', ${2:object});"
		],
		"description": "this.set('tag', object)"
	},

	"getController": {
		"prefix": "cgt",
		"body": [
			"controller.get('${1:object}')"
		],
		"description": "controller.get(object)"
	},

	"setController": {
		"prefix": "cst",
		"body": [
			"controller.set('${1:tag}', ${2:object});"
		],
		"description": "controller.set('tag', object)"
	},

	"getThisController": {
		"prefix": "tcgt",
		"body": [
			"this.controller.get('${1:object}')"
		],
		"description": "this.controller.get(object)"
	},

	"setThisController": {
		"prefix": "tcst",
		"body": [
			"this.controller.set('${1:object}', ${2:object});"
		],
		"description": "this.controller.set(object)"
	},

	// Functions	

	"functionNoParams": {
		"prefix": "func",
		"body": [
			"${1:functionName}() {",
			"\t${2}",
			"}"
		],
		"description": "Function with no parameters"
	},

	"functionOneParam": {
		"prefix": "func1",
		"body": [
			"${1:functionName}(${2:param}) {",
			"\t${3}",
			"}"
		],
		"description": "Function with one parameter"
	},

	"functionTwoParams": {
		"prefix": "func2",
		"body": [
			"${1:functionName}(${2:param1}, ${3:param2}) {",
			"\t${4}",
			"}"
		],
		"description": "Function with two parameters"
	},

	"functionThreeParams": {
		"prefix": "func3",
		"body": [
			"${1:functionName}(${2:param1}, ${3:param2}, ${4:param3}) {",
			"\t${5}",
			"}"
		],
		"description": "Function with three parameters"
	},

	// Service

	"serviceDestructuring": {
		"prefix": "serv",
		"body": [
			"${1:serviceName}: service('${2:serviceSlug}'),"
		],
		"description": "Destructuring a service"
	},

	// Super

	"serviceDeclaration": {
		"prefix": "sup",
		"body": [
			"this._super(...arguments);"
		],
		"description": "this._super(...arguments);"
	},

	// Import

	"import": {
		"prefix": "imp",
		"body": [
			"import ${1:name} from ${2:path};"
		],
		"description": "import anything"
	},

	// Computed Property

	"computedPropertyOneProperty": {
		"prefix": "comp",
		"body": [
			"${1:computedPropertyName}: Ember.computed('${2:propertyToBeWatched}', {",
			"\tget() {",
			"\t\t${3}",
			"\t}",
			"})"
		],
		"description": "Computed Property watching one property"
	},

	// Component Lifecycle Hooks
	"componentLifeCycleHook": {
		"prefix": "chook",
		"body": [
			"${1:hookName}() {",
			"\tthis._super(...arguments);",
			"\t${2}",
			"},"
		],
		"description": "Component Generic Lifecycle Hook"
	},

	"componentInitHook": {
		"prefix": "cinit",
		"body": [
			"init() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component Init Hook"
	},

	"componentDidReceiveAttrs": {
		"prefix": "cdra",
		"body": [
			"didReceiveAttrs() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component didReceiveAttrs Hook"
	},
	
	"componentDidRender": {
		"prefix": "cdr",
		"body": [
			"didRender() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component didRender Hook"
	},

	"componentDidUpdateAttrs": {
		"prefix": "cdua",
		"body": [
			"didUpdateAttrs() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component didUpdateAttrs Hook"
	},

	"componentDidInsertElement": {
		"prefix": "cdie",
		"body": [
			"didInsertElement() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component didInsertElement Hook"
	},

	"componentWillDestroyElement": {
		"prefix": "cwde",
		"body": [
			"willDestroyElement() {",
			"\tthis._super(...arguments);",
			"\t${1}",
			"},"
		],
		"description": "Component willDestroyElement Hook"
	},

	"debugger": {
		"prefix": "dbg",
		"body": [
			"window.debugger;"
		],
		"description": "window.debugger"
	},

	// Ember store commands
	"storeInject": {
		"prefix": "sinj",
		"body": [
			"store: inject.service(),"
		],
		"description": "Injecting the store"
	},

	"storeFindRecord": {
		"prefix": "sfr",
		"body": [
			"this.get('store').findRecord(${1:model}, ${1:id});"
		],
		"description": "Retrieving a single record - findRecord"
	},

	"storePeekRecord": {
		"prefix": "spr",
		"body": [
			"this.get('store').peekRecord(${1:model}, ${1:id});"
		],
		"description": "Peeking a single record - peekRecord"
	},

	"storeFindAll": {
		"prefix": "sfa",
		"body": [
			"this.get('store').findAll(${1:model});"
		],
		"description": "Retrieving multiple records - findAll"
	},

	"storePeekAll": {
		"prefix": "spa",
		"body": [
			"this.get('store').peekAll(${1:model});"
		],
		"description": "Peeking multiple records - peekAll"
	},

	"storeQueryAll": {
		"prefix": "sqa",
		"body": [
			"this.get('store').query('${1:person}', {",
			"\tfilter:{",
			"\t\tname: '${2:Peter}'",
			"\t}",
			"}).then((${3:peters}) => {",
			"\t${4: // do something with peters}",
			"});"
		],
		"description": "Query multiple records - query"
	},

	// importing modules
	"importRunLoop": {
		"prefix": "imp runloop",
		"body": [
			"import { ${1:module} } from '@ember/runloop';"
		],
		"description": "Import from runloop"
	},

	"importRsvp": {
		"prefix": "imp rsvp",
		"body": [
			"import { ${1:module} } from '@ember/rsvp';"
		],
		"description": "Import from RSVP"
	},

	"importUtils": {
		"prefix": "imp utils",
		"body": [
			"import { ${1:module} } from '@ember/utils';"
		],
		"description": "Import from utils"
	},

	"importTest": {
		"prefix": "imp test",
		"body": [
			"import { ${1:module} } from '@ember/test';"
		],
		"description": "Import from test"
	},

	"importString": {
		"prefix": "imp string",
		"body": [
			"import { ${1:module} } from '@ember/string';"
		],
		"description": "Import from string"
	},

	"importService": {
		"prefix": "imp service",
		"body": [
			"import { service } from '@ember/service';"
		],
		"description": "Import from service"
	},

	"importObject": {
		"prefix": "imp object",
		"body": [
			"import { ${1:module} } from '@ember/object';"
		],
		"description": "Import from object"
	},

	"importComputed": {
		"prefix": "imp comp",
		"body": [
			"import { ${1:module} } from '@ember/object/computed';"
		],
		"description": "Import from computed"
	},

	"importArray": {
		"prefix": "imp array",
		"body": [
			"import { ${1:module} } from '@ember/array';"
		],
		"description": "Import from array"
	}
}